"use strict";
////////////////////////////////////////////////////////////////////////////
//
// Copyright 2023 Realm Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
////////////////////////////////////////////////////////////////////////////
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const node_process_1 = __importDefault(require("node:process"));
const node_url_1 = require("node:url");
const sync_proxy_config_1 = require("../sync-proxy-config");
(0, sync_proxy_config_1.inject)({
    create() {
        for (const envVar of ["HTTPS_PROXY", "https_proxy", "HTTP_PROXY", "http_proxy"]) {
            const proxyUrlAsString = node_process_1.default.env[envVar];
            if (proxyUrlAsString) {
                let type;
                const proxyUrl = new node_url_1.URL(proxyUrlAsString);
                const protocol = proxyUrl.protocol;
                if (protocol === "http:") {
                    type = 0 /* ProxyType.Http */;
                }
                else if (protocol === "https:") {
                    type = 1 /* ProxyType.Https */;
                }
                else {
                    throw new Error(`Expected either 'http' or 'https' as protocol for ${envVar} (got ${protocol})`);
                }
                const config = {
                    address: proxyUrl.hostname,
                    type,
                    port: parseInt(proxyUrl.port, 10),
                };
                return config;
            }
        }
        // no environment variable found, and we skip the proxy configuration
        return undefined;
    },
});
//# sourceMappingURL=sync-proxy-config.js.map