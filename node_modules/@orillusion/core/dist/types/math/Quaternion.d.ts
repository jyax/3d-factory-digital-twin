import { Vector3 } from './Vector3';
/**
 * Quaternions are used to represent rotations.
 * @group Math
 */
export declare class Quaternion {
    static HELP_0: Quaternion;
    static HELP_1: Quaternion;
    static HELP_2: Quaternion;
    static _zero: Quaternion;
    static CALCULATION_QUATERNION: Quaternion;
    /**
     * @internal
     */
    x: number;
    /**
     * @internal
     */
    y: number;
    /**
     * @internal
     */
    z: number;
    /**
     * @internal
     */
    w: number;
    /**
     * Create a new quaternion object
     * @param x The X component of a quaternion.
     * @param y The Y component of a quaternion.
     * @param z The Z component of a quaternion.
     * @param w The W component of a quaternion.
     */
    constructor(x?: number, y?: number, z?: number, w?: number);
    /**
     * Identity quaternion
     * @returns
     */
    static identity(): Quaternion;
    /**
     * Converts quaternions to matrices
     * @param q Quaternion
     * @param m Matrix
     */
    static quaternionToMatrix(q: Quaternion, m: any): void;
    get magnitude(): number;
    /**
     * Set the x, y, z, and w components of the existing quaternions.
     * @param x The X component of a quaternion.
     * @param y The Y component of a quaternion.
     * @param z The Z component of a quaternion.
     * @param w The W component of a quaternion.
     */
    set(x?: number, y?: number, z?: number, w?: number): void;
    divide(v: any): Quaternion;
    /**
     * @internal
     */
    setFromArray(d: Float32Array | number[]): this;
    /**
     * Multiply two quaternions
     * @param qa Quaternion 1
     * @param qb Quaternion 2
     */
    multiply(qa: Quaternion, qb: Quaternion): void;
    multiplyVector(vector: Vector3, target?: Quaternion): Quaternion;
    /**
     * Set the quaternion with a given rotation of the axis and Angle.
     * @param axis  axis
     * @param angle angle
     */
    fromAxisAngle(axis: Vector3, angle: number): void;
    /**
     * Turn quaternions into angles
     * @param axis axis
     * @returns
     */
    toAxisAngle(axis: Vector3): number;
    /**
     * Spherically interpolates between two quaternions, providing an interpolation between rotations with constant angle change rate.
     * @param qa The first quaternion to interpolate.
     * @param qb The second quaternion to interpolate.
     * @param t The interpolation weight, a value between 0 and 1.
     */
    slerp(qa: Quaternion, qb: Quaternion, t: number): void;
    /**
     * Linearly interpolates between two quaternions.
     * @param qa The first quaternion to interpolate.
     * @param qb The second quaternion to interpolate.
     * @param t The interpolation weight, a value between 0 and 1.
     */
    lerp(qa: Quaternion, qb: Quaternion, t: number): void;
    /**
     * Fills the quaternion object with values representing the given euler rotation.
     * @param    ax        The angle in radians of the rotation around the ax axis.
     * @param    ay        The angle in radians of the rotation around the ay axis.
     * @param    az        The angle in radians of the rotation around the az axis.
     */
    fromEulerAngles(ax: number, ay: number, az: number): Quaternion;
    /**
     * Sets the current quaternion from the rotation matrix
     * @param m
     * @returns
     */
    setFromRotationMatrix(m: {
        rawData: Float32Array;
    }): this;
    /**
     * Get the Euler Angle
     * @param eulers
     * @returns
     */
    getEulerAngles(eulers?: Vector3): Vector3;
    /**
     * The normalize of the quaternion. Convert this quaternion to a normalize coefficient.
     * @param val normalize coefficient, which is 1 by default
     */
    normalize(val?: number): void;
    /**
     * Returns the value of a quaternion as a string
     * @returns
     */
    toString(): string;
    /**
     * Extracts a quaternion rotation matrix out of a given Matrix3D object.
     * @param matrix The Matrix3D out of which the rotation will be extracted.
     */
    fromMatrix(matrix: any): void;
    /**
     * Returns a quaternion that inverts the current quaternion
     * @param target The default parameter is null. If the current parameter is null, a new quaternion object is returned
     * @returns Quaternion Result
     */
    inverse(target?: Quaternion): Quaternion;
    /**
     * Clones the quaternion.
     * @returns An exact duplicate of the current Quaternion.
     */
    clone(): Quaternion;
    /**
     * Rotates a point.
     * @param vector The Vector3D object to be rotated.
     * @param target An optional Vector3D object that will contain the rotated coordinates. If not provided, a new object will be created.
     * @returns A Vector3D object containing the rotated point.
     */
    transformVector(vector: Vector3, target?: Vector3): Vector3;
    /**
     * Copies the data from a quaternion into this instance.
     * @param q The quaternion to copy from.
     */
    copyFrom(q: Quaternion | Vector3): this;
    /**
     * from untiy API
     * op
     */
    mul(lhs: Quaternion, rhs: Quaternion, target?: Quaternion): Quaternion;
    private clampf;
    static serialize(value: Quaternion): Quaternion;
}
/**
 * @internal
 */
export declare function rotateVectorByQuat(lhs: Quaternion, rhs: Vector3, target: Vector3): Vector3;
