import { Vector3 } from "../Vector3";
import { Navi3DPoint } from "./Navi3DPoint";
import { Navi3DPointFat } from "./Navi3DPointFat";
import { Navi3DTriangle } from "./Navi3DTriangle";
export declare class Navi3DEdge {
    private _edgeMask;
    private _edgeSize;
    private _pointA;
    private _pointB;
    private _triangleOwners;
    private _centerPoint;
    private _edgeDirA2B;
    crossPoint: Vector3;
    fatPointA: Navi3DPointFat;
    fatPointB: Navi3DPointFat;
    private static CALC_FAT_VECTOR;
    constructor(point0: Navi3DPoint, point1: Navi3DPoint);
    get size(): Number;
    get triangleOwners(): Array<Navi3DTriangle>;
    get centerPoint(): Vector3;
    initFatPoints(radius: number): void;
    getFatPoint(pt: Navi3DPoint): Navi3DPointFat;
    getAnotherFatPoint(pt: Navi3DPoint): Navi3DPointFat;
    getAnotherPoint(pt: Navi3DPoint): Navi3DPoint;
    containsPoint(pt: Vector3): Navi3DPoint;
    addTriangleOwners(triangle: Navi3DTriangle): void;
    getPublicPoint(edge: Navi3DEdge): Navi3DPoint;
    getEqualPoint(p: Vector3): Navi3DPoint;
    get pointA(): Navi3DPoint;
    get pointB(): Navi3DPoint;
    get walkAble(): boolean;
    testMask(value: number): boolean;
}
