import { IQuadNode } from "../../core/tree/quad/IQuadNode";
import { QuadAABB } from "../../core/tree/quad/QuadAABB";
import { Plane3D } from "../Plane3D";
import { Vector3 } from "../Vector3";
import { Navi3DEdge } from "./Navi3DEdge";
import { Navi3DPoint } from "./Navi3DPoint";
export declare class Navi3DTriangle extends Vector3 implements IQuadNode {
    private _id;
    private _plane;
    private _points;
    private _edges;
    private _neibourTriangles;
    private _pointAgainstEdge;
    private _edgeAgainstPoint;
    private _mask;
    private _aabbBox;
    f: number;
    gg: number;
    h: number;
    parent: Navi3DTriangle;
    costMultiplier: number;
    openId: number;
    closeId: number;
    get aabb(): QuadAABB;
    initAABB(): void;
    calcGlobalQuadAABB(): void;
    get isTriangle(): boolean;
    constructor(Id: number, edgeA: Navi3DEdge, edgeB: Navi3DEdge, edgeC: Navi3DEdge);
    private genarateAgainstData;
    get id(): number;
    get plane(): Plane3D;
    get points(): Array<Navi3DPoint>;
    addNeibour(edge: Navi3DEdge, triangle: Navi3DTriangle): void;
    getNeibourTriangles(list?: Array<Navi3DTriangle>, edgeMask?: number, triangleMask?: number): Array<Navi3DTriangle>;
    getEdges(list?: Array<Navi3DEdge>, edgeMask?: number): Array<Navi3DEdge>;
    get walkAble(): boolean;
    get edges(): Array<Navi3DEdge>;
    testMask(value: number): boolean;
    getEdgeAgainstPoint(edge: Navi3DEdge): Navi3DPoint;
    getPointAgainstEdge(point: Navi3DPoint): Navi3DEdge;
    getPublicEdge(triangle: Navi3DTriangle): Navi3DEdge;
    loopPublicEdge(triangle: Navi3DTriangle): Navi3DEdge;
    randomPoint(): Vector3;
}
