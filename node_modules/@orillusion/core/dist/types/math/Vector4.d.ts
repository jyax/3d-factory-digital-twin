/***
 * Vector 4D
 * @internal
 * @group Math
 */
export declare class Vector4 {
    /**
     * The x axis defined as a Vector4 object with coordinates (1,0,0).
     */
    static X_AXIS: Vector4;
    /**
     * The y axis defined as a Vector4 object with coordinates (0,1,0).
     */
    static Y_AXIS: Vector4;
    /**
     * The z axis defined as a Vector4 object with coordinates (0,0,1).
     */
    static Z_AXIS: Vector4;
    /**
     * @internal
     */
    static HELP_0: Vector4;
    /**
     * @internal
     */
    static HELP_1: Vector4;
    /**
     * @internal
     */
    static HELP_2: Vector4;
    /**
     * @internal
     */
    static EPSILON: number;
    /**
     * @internal
     */
    static HELP_3: Vector4;
    /**
     * @internal
     */
    static HELP_4: Vector4;
    /**
     * @internal
     */
    static HELP_5: Vector4;
    /**
     * @internal
     */
    static HELP_6: Vector4;
    static ZERO: Vector4;
    static ONE: Vector4;
    static LEFT: Vector4;
    static RIGHT: Vector4;
    static UP: Vector4;
    static DOWN: Vector4;
    static BACK: Vector4;
    static FORWARD: Vector4;
    /**
     * @language en_US
     * The first element of a Vector4 object, such as the x coordinate of
     * a point in the three-dimensional space. The default value is 0.
     */
    x: number;
    /**
     * @language en_US
     * The second element of a Vector4 object, such as the y coordinate of
     * a point in the three-dimensional space. The default value is 0.
     */
    y: number;
    /**
     * @language en_US
     * The third element of a Vector4 object, such as the y coordinate of
     * a point in the three-dimensional space. The default value is 0.
     */
    z: number;
    /**
     * A three-dimensional position or projection that can be used as
     * a perspective projection can also be a w in a quaternion
     * @version Orillusion3D  0.5.1
     */
    w: number;
    constructor(x?: number, y?: number, z?: number, w?: number);
    get width(): number;
    get height(): number;
    static crossVectors(a: Vector4, b: Vector4, target?: Vector4): Vector4;
    static distance(pt1: Vector4, pt2: Vector4): number;
    set(x: number, y: number, z: number, w: number): this;
    multiplyScalar(scalar: number): this;
    copyFrom(v: Vector4): this;
    clone(): Vector4;
}
