import { FrameCache } from './enum/FrameCache';
import { WrapTimeMode } from './enum/WrapTimeMode';
import { Keyframe } from './enum/Keyframe';
/**
 * Animation Cureve
 * has frame list data
 * @group Math
 */
export declare class AnimationCurve {
    private _totalTime;
    private _cache;
    private _cacheOut;
    private _InvalidateCache;
    curve: Keyframe[];
    serializedVersion: number;
    preWarpMode: number;
    postWarpMode: number;
    rotationOrder: number;
    constructor(frames?: Keyframe[], preWarpMode?: WrapTimeMode, postWarpMode?: WrapTimeMode);
    /**
     * return this curve use total time
     */
    get totalTime(): number;
    /**
     * get curve first keframe time
     */
    get first(): Keyframe;
    /**
     * get curve last keyframe time
     */
    get last(): Keyframe;
    /**
     * add keyFrame to curve keyframe last and calcTotalTime
     * @param keyFrame {@link Keyframe}  sea: one key frame data
     */
    addKeyFrame(keyFrame: Keyframe): void;
    /**
     * remove keyframe from this curve
     * @param keyFrame {@link Keyframe}
     */
    removeKeyFrame(keyFrame: Keyframe): void;
    /**
     * calculate keyframe list in to timeline
     * @param cache {@link FrameCache}
     * @param lhsIndex left frame index
     * @param rhsIndex right frame index
     * @param timeOffset offset time default 0.0
     */
    calculateCacheData(cache: FrameCache, lhsIndex: number, rhsIndex: number, timeOffset?: number): void;
    /**
     * get caculate frames value
     * @param time
     * @returns
     */
    getValue(time: number): number;
    /**
     * get has Keyframe list count
     * @returns  int
     */
    getKeyCount(): number;
    /**
     * Get a Keyframe Data by Index
     * @param index must int
     * @returns Keyframe {@link Keyframe}
     */
    getKey(index: number): Keyframe;
    unSerialized(data: any): this;
    unSerialized2(data: Object): this;
    private wrapTime;
    private evaluateCache;
    private findCurve;
    private setupStepped;
    private invalidateCache;
    private calcTotalTime;
    static scaleCurveValue(curve: AnimationCurve, scale: number): void;
}
