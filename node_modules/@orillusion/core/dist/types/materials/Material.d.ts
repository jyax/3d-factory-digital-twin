/// <reference types="@webgpu/types" />
import { StorageGPUBuffer } from "../gfx/graphics/webGpu/core/buffer/StorageGPUBuffer";
import { UniformGPUBuffer } from "../gfx/graphics/webGpu/core/buffer/UniformGPUBuffer";
import { Texture } from "../gfx/graphics/webGpu/core/texture/Texture";
import { RenderShaderPass } from "../gfx/graphics/webGpu/shader/RenderShaderPass";
import { PassType } from "../gfx/renderJob/passRenderer/state/RendererType";
import { Shader } from "../gfx/graphics/webGpu/shader/Shader";
import { Color } from "../math/Color";
import { Vector2 } from "../math/Vector2";
import { Vector3 } from "../math/Vector3";
import { Vector4 } from "../math/Vector4";
import { BlendMode } from "./BlendMode";
export declare class Material {
    /**
     *
     * Material Unique Identifier
     */
    instanceID: string;
    /**
      *
      * name of this material
      */
    name: string;
    enable: boolean;
    private _defaultSubShader;
    protected _shader: Shader;
    constructor();
    set shader(shader: Shader);
    get shader(): Shader;
    get doubleSide(): boolean;
    set doubleSide(value: boolean);
    get castShadow(): boolean;
    set castShadow(value: boolean);
    get acceptShadow(): boolean;
    set acceptShadow(value: boolean);
    get blendMode(): BlendMode;
    set blendMode(value: BlendMode);
    get depthCompare(): GPUCompareFunction;
    set depthCompare(value: GPUCompareFunction);
    get transparent(): boolean;
    set transparent(value: boolean);
    get cullMode(): GPUCullMode;
    set cullMode(value: GPUCullMode);
    get depthWriteEnabled(): boolean;
    set depthWriteEnabled(value: boolean);
    set useBillboard(value: boolean);
    /**
     * get render pass by renderType
     * @param passType
     * @returns
     */
    getPass(passType: PassType): RenderShaderPass[];
    /**
     * get all color render pass
     * @returns
     */
    getAllPass(): RenderShaderPass[];
    /**
     * clone one material
     * @returns Material
     */
    clone(): Material;
    destroy(force: boolean): void;
    setDefine(define: string, value: boolean): void;
    setTexture(propertyName: string, texture: Texture): void;
    setStorageBuffer(propertyName: string, buffer: StorageGPUBuffer): void;
    setUniformBuffer(propertyName: string, buffer: UniformGPUBuffer): void;
    setUniformFloat(propertyName: string, value: number): void;
    setUniformVector2(propertyName: string, value: Vector2): void;
    setUniformVector3(propertyName: string, value: Vector3): void;
    setUniformVector4(propertyName: string, value: Vector4): void;
    setUniformColor(propertyName: string, value: Color): void;
    getUniformFloat(str: string): any;
    getUniformV2(str: string): Vector2;
    getUniformV3(str: string): Vector3;
    getUniformV4(str: string): Vector4;
    getUniformColor(str: string): Color;
    getTexture(str: string): Texture;
    getStorageBuffer(str: string): StorageGPUBuffer;
    getStructStorageBuffer(str: string): import("..").GPUBufferBase;
    getUniformBuffer(str: string): import("..").GPUBufferBase;
    applyUniform(): void;
}
