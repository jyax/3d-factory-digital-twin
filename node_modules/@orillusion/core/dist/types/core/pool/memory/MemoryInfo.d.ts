import { Color } from '../../../math/Color';
import { Quaternion } from '../../../math/Quaternion';
import { Vector2 } from '../../../math/Vector2';
import { Vector3 } from '../../../math/Vector3';
import { Vector4 } from '../../../math/Vector4';
/**
 * @internal
 * @group Core
 */
export declare class MemoryInfo {
    byteOffset: number;
    byteSize: number;
    offset: number;
    dataBytes: DataView;
    get x(): number;
    set x(v: number);
    get y(): number;
    set y(v: number);
    get z(): number;
    set z(v: number);
    get w(): number;
    set w(v: number);
    setX(x: number): void;
    setXY(x: number, y: number): void;
    setXYZ(x: number, y: number, z: number): void;
    setXYZW(x: number, y: number, z: number, w: number): void;
    setVector2Array(vs: Vector2[]): void;
    setVector3Array(vs: Vector3[]): void;
    setVector4Array(vs: Vector3[] | Vector4[] | Quaternion[]): void;
    setColorArray(colorArray: Color[]): void;
    setInt8(v: number, index?: number): void;
    getInt8(index?: number): number;
    setInt16(v: number, index?: number): void;
    getInt16(index?: number): number;
    setInt32(v: number, index?: number): void;
    getInt32(index?: number): number;
    setFloat(v: number, index?: number): void;
    getFloat(index?: number): number;
    setUint8(v: number, index?: number): void;
    getUint8(index?: number): number;
    setUint16(v: number, index?: number): void;
    getUint16(index?: number): number;
    setUint32(v: number, index?: number): void;
    getUint32(index?: number): number;
    setArray(index: number, data: number[]): void;
    setFloat32Array(index: number, data: Float32Array): void;
    setArrayBuffer(index: number, arrayBuffer: ArrayBuffer): void;
    setInt8Array(index: number, data: Int8Array): void;
    setInt16Array(index: number, data: Int16Array): void;
    setInt32Array(index: number, data: Int32Array): void;
    setUint8Array(index: number, data: Uint8Array): void;
    setUint16Array(index: number, data: Uint16Array): void;
    setUint32Array(index: number, data: Uint32Array): void;
    setData(index: number, data: number): void;
    setVector2(index: number, data: Vector2): void;
    setVector3(index: number, data: Vector3): void;
    setVector4(index: number, data: Vector4): void;
    setColor(index: number, data: Color): void;
    getData(index: number): number;
    writeFloat(v: number): void;
    writeInt8(v: number): void;
    writeInt16(v: number): void;
    writeInt32(v: number): void;
    writeUint8(v: number): void;
    writeUint16(v: number): void;
    writeUint32(v: number): void;
    writeVector2(v: Vector2): void;
    writeVector3(v: Vector3): void;
    writeVector4(v: Vector4): void;
    writeRGBColor(v: Color): void;
    writeArray(v: number[]): void;
    writeFloat32Array(v: Float32Array): void;
    writeInt8Array(v: Int8Array): void;
    writeInt16Array(v: Int16Array): void;
    writeInt32Array(v: Int32Array): void;
    writeUint8Array(v: Uint8Array): void;
    writeUint16Array(v: Uint16Array): void;
    writeUint32Array(v: Uint32Array): void;
    reset(): void;
    destroy(): void;
}
