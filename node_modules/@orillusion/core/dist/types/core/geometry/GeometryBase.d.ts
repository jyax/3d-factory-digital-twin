import { ShaderReflection } from "../../gfx/graphics/webGpu/shader/value/ShaderReflectionInfo";
import { Vector3 } from "../../math/Vector3";
import { BoundingBox } from "../bound/BoundingBox";
import { VertexAttributeName } from "./VertexAttributeName";
import { GeometryVertexBuffer } from "./GeometryVertexBuffer";
import { GeometryIndicesBuffer } from "./GeometryIndicesBuffer";
import { GeometryVertexType } from "./GeometryVertexType";
import { VertexAttributeData } from "./VertexAttributeData";
import { ArrayBufferData } from "../../gfx/graphics/webGpu/core/buffer/ArrayBufferData";
import { BlendShapeData } from "../../loader/parser/prefab/prefabData/BlendShapeData";
import { Matrix4 } from "../../math/Matrix4";
export type LODDescriptor = {
    indexStart: number;
    indexCount: number;
    vertexStart: number;
    vertexCount: number;
    firstStart: number;
    index: number;
    topology: number;
};
/**
 * geometry split more subGeometry descriptor
 * @group Geometry
 */
export declare class SubGeometry {
    lodLevels: LODDescriptor[];
}
/**
 * @group Geometry
 */
export declare class GeometryBase {
    instanceID: string;
    name: string;
    subGeometries: SubGeometry[];
    morphTargetsRelative: boolean;
    morphTargetDictionary: {
        [blenderName: string]: number;
    };
    skinNames: string[];
    bindPose: Matrix4[];
    blendShapeData: BlendShapeData;
    vertexDim: number;
    private _bounds;
    private _attributeMap;
    private _attributes;
    private _indicesBuffer;
    private _vertexBuffer;
    private _onChange;
    private _wireframeLines;
    constructor();
    get indicesBuffer(): GeometryIndicesBuffer;
    get vertexBuffer(): GeometryVertexBuffer;
    get vertexAttributes(): string[];
    get vertexAttributeMap(): Map<string, VertexAttributeData>;
    get geometryType(): GeometryVertexType;
    set geometryType(value: GeometryVertexType);
    get bounds(): BoundingBox;
    set bounds(value: BoundingBox);
    /**
     * add subGeometry from lod level
     * @param lodLevels @see LODDescriptor
     */
    addSubGeometry(...lodLevels: LODDescriptor[]): SubGeometry;
    /**
     * create geometry by shaderReflection
     * @param shaderReflection ShaderReflection
     */
    generate(shaderReflection: ShaderReflection): void;
    setIndices(data: ArrayBufferData): void;
    setAttribute(attribute: VertexAttributeName | string, data: ArrayBufferData): void;
    getAttribute(attribute: VertexAttributeName | string): VertexAttributeData;
    hasAttribute(attribute: VertexAttributeName | string): boolean;
    genWireframe(): Vector3[];
    compute(): void;
    private static crossA;
    private static crossB;
    private static crossRet;
    private static point1;
    private static point2;
    private static point3;
    computeNormals(): this;
    isPrimitive(): boolean;
    destroy(force?: boolean): void;
}
