import { CEvent } from '../event/CEvent';
import { CEventDispatcher } from '../event/CEventDispatcher';
import { KeyEvent } from '../event/eventConst/KeyEvent';
import { PointerEvent3D } from '../event/eventConst/PointerEvent3D';
/**
 *
 * Processing input devices, such as mouse, keyboard, and touch.
 * If the current event does not occur within the View3D, it will not be dispatched
 * @group IO
 */
export declare class InputSystem extends CEventDispatcher {
    /**
     * coord x of canvas
     */
    canvasX: number;
    /**
     * coord y of canvas
     */
    canvasY: number;
    /**
     *  whether the mouse is down now
     */
    isMouseDown: boolean;
    /**
     * whether the mouse right key is down now
     */
    isRightMouseDown: boolean;
    /**
     * reference of canvas
     */
    canvas: HTMLCanvasElement;
    /**
     * current mouse coordinate x of Canvas
     */
    mouseX: number;
    /**
     * current mouse coordinate y of Canvas
     */
    mouseY: number;
    /**
     * the delta value when mouse wheeled
     */
    wheelDelta: number;
    /**
     * the delta value of mouse x
     */
    mouseOffsetX: number;
    /**
     * the delta value of mouse y
     */
    mouseOffsetY: number;
    /**
     * the history value of mouse x
     */
    mouseLastX: number;
    /**
     *
     * the history value of mouse y
     *
     */
    mouseLastY: number;
    private _time;
    private _keyStatus;
    private _mouseStatus;
    private _isTouchStart;
    protected _keyEvent3d: KeyEvent;
    protected _pointerEvent3D: PointerEvent3D;
    protected _windowsEvent3d: CEvent;
    /**
     * init the input system
     * @param canvas the reference of canvas
     */
    initCanvas(canvas: HTMLCanvasElement): void;
    private _gp;
    private onPinch;
    private onSwipe;
    private _oldPosition1;
    private _oldPosition2;
    private GetTargetTouches;
    private rightClick;
    private middleDown;
    private middleUp;
    private mouseClick;
    private _downTime;
    private mouseEnd;
    private mouseStart;
    private mouseMove;
    private mouseOver;
    private mouseWheel;
    private keyDown;
    private keyUp;
    private GetSlideAngle;
    /**
     *
     * @param  startX {Number}
     * @param  startY {Number}
     * @param  endX   {Number}
     * @param  endY   {Number}
     * @returns result {number} 1: up, 2: down, 3: left, 4: right, 0: not move
     */
    GetSlideDirection(startX: number, startY: number, endX: number, endY: number): number;
}
