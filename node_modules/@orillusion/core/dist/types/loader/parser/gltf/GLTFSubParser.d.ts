import { Skeleton } from '../../../components/anim/skeletonAnim/Skeleton';
import { Object3D } from '../../../core/entities/Object3D';
import { GLTF_Info } from './GLTFInfo';
/**
 * @internal
 */
export declare class GLTFSubParser {
    currentSceneName: any;
    gltf: GLTF_Info;
    initUrl: string;
    private _generator;
    private _version;
    private _BASE64_MARKER;
    private _cameraParser;
    private _meshParser;
    private _materialParser;
    private _skinParser;
    private _skeletonParser;
    private _converter;
    constructor();
    get version(): any;
    parse(initUrl: string, gltf: any, sceneId: any): Promise<false | {
        rootNode: Object3D;
        textures: any[];
        animations: any;
        cameras: any[];
    }>;
    destory(): void;
    private parseScene;
    private parseNode;
    private errorMiss;
    private parseCamera;
    private parseMesh;
    parseTexture(index: number): Promise<any>;
    parseMaterial(materialId: any): Promise<any>;
    private parseAnimations;
    private parseObject3D;
    parseSkeleton(skeletonID: any): Skeleton;
    parseSkeletonAnimation(skeleton: Skeleton, animation: any): import("../../..").SkeletonAnimationClip;
    private traverse;
    private convertToNode;
    private parseSkin;
    parseAccessor(accessorId: any): any;
    private getTypedArrayFromArrayBuffer;
    parseBufferView(bufferViewId: any): any;
    private parseBuffer;
    private getLight;
    private applyNodeExtensions;
}
