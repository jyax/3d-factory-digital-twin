import { CEvent } from '../CEvent';
/**
 * enum event type of pointer.
 * {@link InputSystem}
 * @group Events
 */
export declare class PointerEvent3D extends CEvent {
    /**
     * Triggered when the touch point enters the collision
     */
    static PICK_OVER: string;
    /**
     * Triggered when the touch point enters the interactive GUI
     */
    static PICK_OVER_GUI: string;
    /**
     * Triggered when the touch point clicked the collision
     */
    static PICK_CLICK: string;
    /**
    * Triggered when the touch point clicked the interactive GUI
    */
    static PICK_CLICK_GUI: string;
    /**
    * Triggered when the touch point leave the collision
    */
    static PICK_OUT: string;
    /**
     * Triggered when the touch point leave the interactive GUI
     */
    static PICK_OUT_GUI: string;
    /**
    * Triggered when the touch point move on the collision
    */
    static PICK_MOVE: string;
    /**
     * Triggered when the touch point release from the collision
     */
    static PICK_UP: string;
    /**
     * Triggered when the touch point release from the interactive GUI
     */
    static PICK_UP_GUI: string;
    /**
     * Triggered when the touch point pressed the collision
     */
    static PICK_DOWN: string;
    /**
     * Triggered when the touch point pressed the interactive GUI
     */
    static PICK_DOWN_GUI: string;
    /**
     *
     * Triggered when the right pointer clicked
     */
    static POINTER_RIGHT_CLICK: string;
    /**
     *
     * Triggered when the middle pointer released
     */
    static POINTER_MID_UP: string;
    /**
     *
     * Triggered when the middle pointer pressed
     */
    static POINTER_MID_DOWN: string;
    /**
     * Triggered when the pointer clicked
     */
    static POINTER_CLICK: string;
    /**
     *
     * Triggered when the pointer moved
     */
    static POINTER_MOVE: string;
    /**
     *
     * Triggered when the pointer pressed
     */
    static POINTER_DOWN: string;
    /**
     *
     * Triggered when the pointer released
     */
    static POINTER_UP: string;
    /**
     *
     * Triggered when the pointer move out
     */
    static POINTER_OUT: string;
    /**
     *
     * Triggered when the pointer move over
     */
    static POINTER_OVER: string;
    /**
     *
     * Triggered when the wheel pointer is used
     */
    static POINTER_WHEEL: string;
    /**
     * A unique identifier for an event caused by a pointer.
     */
    pointerId: number;
    /**
     * event type
     */
    pointerType: string;
    /**
     * whether it's the preferred pointer in this type of pointer.
     */
    isPrimary: boolean;
    /**
     * Normalize values
     */
    pressure: number;
    /**
     * coord x of mouse
     */
    mouseX: number;
    /**
     * coord y of mouse
     */
    mouseY: number;
    /**
     * delta of coord x of mouse
     */
    movementX: number;
    /**
     * delta of coord y of mouse
     */
    movementY: number;
    /**
     * Returns a negative value when scrolling left,
     * a positive value when scrolling right, otherwise 0.
     */
    deltaX: number;
    /**
     * Returns a positive value when scrolling down,
     *  a negative value when scrolling up, otherwise 0.
     */
    deltaY: number;
    /**
     * @internal
     */
    deltaZ: number;
    /**
     * @internal
     */
    reset(): void;
}
