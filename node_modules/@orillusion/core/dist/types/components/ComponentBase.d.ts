/// <reference types="@webgpu/types" />
import { View3D } from "../core/View3D";
import { Object3D } from "../core/entities/Object3D";
import { CEventDispatcher } from "../event/CEventDispatcher";
import { IComponent } from "./IComponent";
import { Transform } from "./Transform";
/**
 * Components are used to attach functionality to object3D, it has an owner object3D.
 * The component can receive update events at each frame.
 * @group Components
 */
export declare class ComponentBase implements IComponent {
    /**
     * owner object3D
     */
    object3D: Object3D;
    /**
     * @internal
     */
    protected _eventDispatcher: CEventDispatcher;
    get eventDispatcher(): CEventDispatcher;
    set eventDispatcher(value: CEventDispatcher);
    /**
     * @internal
     */
    protected _enable: boolean;
    private __isStart;
    isDestroyed?: boolean;
    get isStart(): boolean;
    /**
     * Return the Transform component attached to the Object3D.
     */
    get transform(): Transform;
    /**
     * Enable/disable components. The enabled components can be updated, while the disabled components cannot be updated.
     */
    set enable(value: boolean);
    /**
     * Enable/disable components. The enabled components can be updated, while the disabled components cannot be updated.
     */
    get enable(): boolean;
    private __init;
    private __start;
    private __stop;
    init(param?: any): void;
    start(): void;
    stop(): void;
    onEnable?(view?: View3D): any;
    onDisable?(view?: View3D): any;
    onUpdate?(view?: View3D): any;
    onLateUpdate?(view?: View3D): any;
    onBeforeUpdate?(view?: View3D): any;
    onCompute?(view?: View3D, command?: GPUCommandEncoder): any;
    onGraphic?(view?: View3D): any;
    onParentChange?(lastParent?: Object3D, currentParent?: Object3D): any;
    /**
     *
     * clone component data to target object3D
     * @param obj target object3D
     */
    cloneTo(obj: Object3D): void;
    copyComponent(from: this): this;
    /**
     * internal
     * Add update function. Will be executed at every frame update.
     * @param call callback
     */
    private _onUpdate;
    /**
     * Add a delayed update function.
     * @param call callback
     */
    private _onLateUpdate;
    /**
     * The function executed before adding frame updates.
     * @param call callback
     */
    private _onBeforeUpdate;
    /**
     * @internal
     * Add individual execution compute capability
     * @param call callback
     */
    private _onCompute;
    /**
     * Add individual execution drawing ability
     * @param call callback
     */
    private _onGraphic;
    /**
     * before release this component, object refrences are not be set null now.
     */
    beforeDestroy(force?: boolean): void;
    /**
     * release this component
     */
    destroy(force?: boolean): void;
}
