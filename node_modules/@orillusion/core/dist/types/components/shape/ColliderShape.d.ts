import { Matrix4 } from "../../math/Matrix4";
import { Ray } from "../../math/Ray";
import { Vector3 } from "../../math/Vector3";
export type HitInfo = {
    intersectPoint?: Vector3;
    distance: number;
    collider?: any;
};
export declare enum ColliderShapeType {
    None = 0,
    Box = 1,
    Capsule = 2,
    Sphere = 3,
    Mesh = 4
}
/**
 * Shape of collider body, Base class of collider shape
 * @group Collider
 */
export declare class ColliderShape {
    private _center;
    private _size;
    private _halfSize;
    protected _shapeType: ColliderShapeType;
    protected static v3_help_0: Vector3;
    protected static helpMatrix: Matrix4;
    protected static helpRay: Ray;
    constructor();
    get shapeType(): ColliderShapeType;
    /**
     * Set the position and size of collision objects
     * @param ct The position of the collision object in the local space of the object.
     * @param sz The size of the collision body in the X, Y, and Z directions.
     * @returns
     */
    setFromCenterAndSize(ct?: Vector3, sz?: Vector3): this;
    /**
     * The position of the collision object in the local space of the object.
     */
    get center(): Vector3;
    set center(value: Vector3);
    /**
     *
     * The size of the collision body in the X, Y, and Z directions.
     * @returns Vector3
     */
    get size(): Vector3;
    set size(value: Vector3);
    /**
     * Half the size of the collision body.
     */
    get halfSize(): Vector3;
    /**
     * Ray pickup.Emit a ray from a designated location to detect objects colliding with the ray.
     * @param ray emit ray
     * @param fromMatrix matrix
     * @returns Pick result intersect: whether to collide;
     *  IntersectPoint: collision point;
     *  Distance: The distance from the origin of the ray to the collision point.
     */
    rayPick(ray: Ray, fromMatrix: Matrix4): HitInfo;
}
