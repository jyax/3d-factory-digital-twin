/// <reference types="@webgpu/types" />
import { Object3D } from '../../core/entities/Object3D';
import { View3D } from '../../core/View3D';
import { ClusterLightingBuffer } from '../../gfx/renderJob/passRenderer/cluster/ClusterLightingBuffer';
import { GeometryBase } from '../../core/geometry/GeometryBase';
import { RendererPassState } from '../../gfx/renderJob/passRenderer/state/RendererPassState';
import { PassType } from '../../gfx/renderJob/passRenderer/state/RendererType';
import { MorphTargetData } from '../anim/morphAnim/MorphTargetData';
import { RenderNode } from './RenderNode';
import { Material } from '../../materials/Material';
/**
 * The mesh renderer component is a component used to render the mesh
 * @group Components
 */
export declare class MeshRenderer extends RenderNode {
    /**
     * Enabling this option allows the grid to display any shadows cast on the grid.
     */
    receiveShadow: boolean;
    protected morphData: MorphTargetData;
    constructor();
    onEnable(): void;
    onDisable(): void;
    cloneTo(obj: Object3D): void;
    copyComponent(from: this): this;
    /**
     * The geometry of the mesh determines its shape
     */
    get geometry(): GeometryBase;
    set geometry(value: GeometryBase);
    /**
     * material
     */
    get material(): Material;
    set material(value: Material);
    /**
     * Set deformation animation parameters
     */
    setMorphInfluence(key: string, value: number): void;
    setMorphInfluenceIndex(index: number, value: number): void;
    onCompute(view: View3D, command: GPUCommandEncoder): void;
    /**
     * @internal
     * @param passType
     * @param renderPassState
     * @param scene3D
     * @param clusterLightingRender
     * @param probes
     */
    nodeUpdate(view: View3D, passType: PassType, renderPassState: RendererPassState, clusterLightingBuffer: ClusterLightingBuffer): void;
    destroy(force?: boolean): void;
}
