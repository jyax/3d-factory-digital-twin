import { RenderShaderCompute } from "../compute/RenderShaderCompute";
import { GPUBufferBase } from "../core/buffer/GPUBufferBase";
import { StorageGPUBuffer } from "../core/buffer/StorageGPUBuffer";
import { StructStorageGPUBuffer } from "../core/buffer/StructStorageGPUBuffer";
import { UniformGPUBuffer } from "../core/buffer/UniformGPUBuffer";
import { Texture } from "../core/texture/Texture";
import { RenderShaderPass } from "./RenderShaderPass";
import { UniformValue } from "./value/UniformValue";
import { PassType } from "../../../renderJob/passRenderer/state/RendererType";
import { Color } from "../../../../math/Color";
import { Vector2 } from "../../../../math/Vector2";
import { Vector3 } from "../../../../math/Vector3";
import { Vector4 } from "../../../../math/Vector4";
import { Struct } from "../../../../util/struct/Struct";
export declare class Shader {
    computes: RenderShaderCompute[];
    passShader: Map<PassType, RenderShaderPass[]>;
    constructor();
    addRenderPass(renderShader: RenderShaderPass, index?: number): void;
    removeShader(renderShader: RenderShaderPass, index?: number): void;
    removeShaderByIndex(passType: PassType, index?: number): void;
    getSubShaders(passType: PassType): RenderShaderPass[];
    hasSubShaders(passType: PassType): boolean;
    getDefaultShaders(): RenderShaderPass[];
    getDefaultColorShader(): RenderShaderPass;
    setDefine(arg0: string, arg1: boolean): void;
    deleteDefine(arg0: string): void;
    setUniform(arg0: string, arg1: UniformValue): void;
    setUniformFloat(arg0: string, arg1: number): void;
    setUniformVector2(arg0: string, arg1: Vector2): void;
    setUniformVector3(arg0: string, arg1: Vector3): void;
    setUniformVector4(arg0: string, arg1: Vector4): void;
    setUniformColor(arg0: string, arg1: Color): void;
    getUniform(arg0: string): any;
    getUniformFloat(arg0: string): number;
    getUniformVector2(arg0: string): Vector2;
    getUniformVector3(arg0: string): Vector3;
    getUniformVector4(arg0: string): Vector4;
    getUniformColor(arg0: string): Color;
    setTexture(arg0: string, arg1: Texture): void;
    getTexture(arg0: string): Texture;
    setUniformBuffer(arg0: string, arg1: UniformGPUBuffer): void;
    getUniformBuffer(arg0: string): GPUBufferBase;
    setStorageBuffer(arg0: string, arg1: StorageGPUBuffer): void;
    getStorageBuffer(arg0: string): StorageGPUBuffer;
    setStructStorageBuffer<T extends Struct>(arg0: string, arg1: StructStorageGPUBuffer<T>): void;
    getStructStorageBuffer(arg0: string): GPUBufferBase;
    noticeValueChange(): void;
    destroy(): void;
    clone(): Shader;
    applyUniform(): void;
}
