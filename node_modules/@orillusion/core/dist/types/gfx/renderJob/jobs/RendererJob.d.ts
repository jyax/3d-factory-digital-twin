import { View3D } from '../../../core/View3D';
import { PickFire } from '../../../io/PickFire';
import { ColorPassRenderer } from '../passRenderer/color/ColorPassRenderer';
import { GBufferFrame } from '../frame/GBufferFrame';
import { OcclusionSystem } from '../occlusion/OcclusionSystem';
import { ClusterLightingRender } from '../passRenderer/cluster/ClusterLightingRender';
import { PointLightShadowRenderer } from '../passRenderer/shadow/PointLightShadowRenderer';
import { ShadowMapPassRenderer } from '../passRenderer/shadow/ShadowMapPassRenderer';
import { PreDepthPassRenderer } from '../passRenderer/preDepth/PreDepthPassRenderer';
import { RendererMap } from './RenderMap';
import { PostRenderer } from '../passRenderer/post/PostRenderer';
import { PostBase } from '../post/PostBase';
import { RendererBase } from '../passRenderer/RendererBase';
import { Ctor } from '../../../util/Global';
import { DDGIProbeRenderer } from '../passRenderer/ddgi/DDGIProbeRenderer';
/**
 * render jobs
 * @internal
 * @group Post
 */
export declare class RendererJob {
    /**
     * @internal
     */
    rendererMap: RendererMap;
    /**
     * @internal
     */
    shadowMapPassRenderer: ShadowMapPassRenderer;
    /**
     * @internal
     */
    pointLightShadowRenderer: PointLightShadowRenderer;
    /**
     * @internal
     */
    ddgiProbeRenderer: DDGIProbeRenderer;
    /**
     * @internal
     */
    postRenderer: PostRenderer;
    /**
     * @internal
     */
    clusterLightingRender: ClusterLightingRender;
    /**
     * @internal
     */
    occlusionSystem: OcclusionSystem;
    /**
     * @internal
     */
    depthPassRenderer: PreDepthPassRenderer;
    /**
       * @internal
       */
    colorPassRenderer: ColorPassRenderer;
    /**
     * @internal
     */
    pauseRender: boolean;
    pickFire: PickFire;
    renderState: boolean;
    protected _view: View3D;
    /**
     * Create a renderer task class
     * @param scene Scene3D {@link Scene3D}
     */
    constructor(view: View3D);
    addRenderer<T extends RendererBase>(c: Ctor<T>, param?: any): T;
    /**
     * @internal
     */
    get view(): View3D;
    set view(view: View3D);
    /**
     * start render task
     */
    start(): void;
    /**
     * stop render task
     */
    stop(): void;
    /**
     * pause render task
     */
    pause(): void;
    /**
     * back render task
     */
    resume(): void;
    /**
     * @internal
     */
    enablePost(gbufferFrame: GBufferFrame): void;
    /**
     * Add a post processing special effects task
     * @param post
     */
    addPost(post: PostBase): PostBase | PostBase[];
    /**
     * Remove specified post-processing effects
     * @param post
     */
    removePost(post: PostBase | PostBase[]): void;
    /**
     * To render a frame of the scene
     */
    renderFrame(): void;
    debug(): void;
}
