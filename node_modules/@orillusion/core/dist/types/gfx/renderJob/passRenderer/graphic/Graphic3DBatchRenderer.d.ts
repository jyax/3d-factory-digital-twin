/// <reference types="@webgpu/types" />
import { RenderNode } from "../../../../components/renderer/RenderNode";
import { View3D } from "../../../../core/View3D";
import { Color } from "../../../../math/Color";
import { Vector3 } from "../../../../math/Vector3";
import { RendererPassState } from "../state/RendererPassState";
import { PassType } from "../state/RendererType";
import { Graphics3DShape } from "./Graphics3DShape";
import { ClusterLightingBuffer } from "../cluster/ClusterLightingBuffer";
/**
* @internal
*/
export declare class Graphic3DBatchRenderer extends RenderNode {
    shapes: Map<string, Graphics3DShape>;
    protected mDirtyData: boolean;
    protected mBatchSize: number;
    protected mMinIndexCount: number;
    protected mGPUPrimitiveTopology: GPUPrimitiveTopology;
    constructor(minIndexCount: number, topology: GPUPrimitiveTopology);
    init(): void;
    fillShapeData(uuid: string, type: string, color: Color, points: Vector3[]): void;
    removeShape(uuid: string): void;
    nodeUpdate(view: View3D, passType: PassType, renderPassState: RendererPassState, clusterLightingBuffer?: ClusterLightingBuffer): void;
    allocGraphics3DShape(uuid: string, transformIndex: number): Graphics3DShape;
}
