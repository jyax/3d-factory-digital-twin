import { Matrix4 } from "../../../../math/Matrix4";
import { Vector3 } from "../../../../math/Vector3";
import { Probe } from "./Probe";
import { GlobalIlluminationSetting } from "../../../../setting/GlobalIlluminationSetting";
import { StorageGPUBuffer } from "../../../graphics/webGpu/core/buffer/StorageGPUBuffer";
import { UniformGPUBuffer } from "../../../..";
/**
 * @internal
 * @group Post
 */
export declare class DDGIIrradianceVolume {
    setting: GlobalIlluminationSetting;
    probesBufferData: Float32Array;
    probesBuffer: StorageGPUBuffer;
    isVolumeFrameChange: boolean;
    private randomOrientation;
    private startPosition;
    private isVolumeChange;
    irradianceVolumeBuffer: UniformGPUBuffer;
    private readonly directionDistance;
    private readonly randomSeedCount;
    private useRandomIndex;
    private centerDirection;
    private arroundPositions;
    updateOrientation(): Matrix4;
    init(setting: GlobalIlluminationSetting): void;
    setVolumeDataChange(): void;
    updateProbes(probes: Probe[]): void;
    private createFramesBuffer;
    uploadBuffer(): void;
    calcPosition(x: number, y: number, z: number, result?: Vector3): Vector3;
    private debugX;
    private debugY;
    private debugZ;
    private fillIrradianceData;
}
