/// <reference types="@webgpu/types" />
import { RenderNode } from "../../../components/renderer/RenderNode";
import { Scene3D } from "../../../core/Scene3D";
import { View3D } from "../../../core/View3D";
import { ViewQuad } from "../../../core/ViewQuad";
import { CEventDispatcher } from "../../../event/CEventDispatcher";
import { Texture } from "../../graphics/webGpu/core/texture/Texture";
import { CollectInfo } from "../collect/CollectInfo";
import { RTFrame } from "../frame/RTFrame";
import { OcclusionSystem } from "../occlusion/OcclusionSystem";
import { RendererPassState } from "./state/RendererPassState";
import { PassType } from "./state/RendererType";
import { RenderContext } from "./RenderContext";
import { ClusterLightingBuffer } from "./cluster/ClusterLightingBuffer";
import { RenderTexture } from "../../..";
/**
 * @internal
 * @group Post
 */
export declare class RendererBase extends CEventDispatcher {
    rendererPassState: RendererPassState;
    splitRendererPassState: RendererPassState;
    useRenderBundle: boolean;
    debugViewQuads: ViewQuad[];
    debugTextures: Texture[];
    protected renderContext: RenderContext;
    protected _rendererType: PassType;
    protected _rtFrame: RTFrame;
    get passType(): PassType;
    set passType(value: PassType);
    constructor();
    setRenderStates(rtFrame: RTFrame): void;
    setIrradiance(probeIrradianceMap: RenderTexture, probeDepthMap: RenderTexture): void;
    compute(view: View3D, occlusionSystem: OcclusionSystem): void;
    render(view: View3D, occlusionSystem: OcclusionSystem, clusterLightingBuffer: ClusterLightingBuffer, maskTr?: boolean): void;
    protected nodeUpload(collectInfo: CollectInfo, scene: Scene3D, occlusionSystem?: OcclusionSystem): void;
    protected occlusionRenderNodeTest(i: number, id: number, occlusionSystem: OcclusionSystem): boolean;
    protected renderOp(encoder: GPURenderPassEncoder, command: GPUCommandEncoder, collectInfo: CollectInfo, scene: Scene3D, occlusionSystem: OcclusionSystem): void;
    protected renderTr(encoder: GPURenderPassEncoder, command: GPUCommandEncoder, collectInfo: CollectInfo, scene: Scene3D, occlusionSystem: OcclusionSystem): void;
    protected renderBundleOp(view: View3D, collectInfo: CollectInfo, occlusionSystem: OcclusionSystem, clusterLightingBuffer?: ClusterLightingBuffer): any[];
    protected renderBundleTr(view: View3D, collectInfo: CollectInfo, occlusionSystem: OcclusionSystem, clusterLightingBuffer?: ClusterLightingBuffer): any[];
    protected recordRenderBundleNode(view: View3D, encoder: any, nodes: RenderNode[], clusterLightingBuffer?: ClusterLightingBuffer): void;
    protected drawRenderNodes(view: View3D, encoder: GPURenderPassEncoder, command: GPUCommandEncoder, nodes: RenderNode[], occlusionSystem: OcclusionSystem, clusterLightingBuffer?: ClusterLightingBuffer): void;
    setDebugTexture(textures: Texture[]): void;
}
