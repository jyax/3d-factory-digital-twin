import { MeshRenderer } from "../../../../../components/renderer/MeshRenderer";
import { View3D } from "../../../../../core/View3D";
import { Object3D } from "../../../../../core/entities/Object3D";
import { GeometryBase } from "../../../../../core/geometry/GeometryBase";
import { Color } from "../../../../../math/Color";
import { Vector4 } from "../../../../../math/Vector4";
import { BitmapTexture2DArray } from "../../../../../textures/BitmapTexture2DArray";
import { StorageGPUBuffer } from "../../../../graphics/webGpu/core/buffer/StorageGPUBuffer";
export declare class Graphic3DMeshRenderer extends MeshRenderer {
    transformBuffer: StorageGPUBuffer;
    sourceGeometry: GeometryBase;
    texture: BitmapTexture2DArray;
    object3Ds: Object3D[];
    private _onChange;
    private _computeShader;
    init(): void;
    create(source: GeometryBase, tex: BitmapTexture2DArray, num: number): void;
    setTextureID(i: number, id: number): void;
    setBaseColor(i: number, color: Color): void;
    setEmissiveColor(i: number, color: Color): void;
    setUVRect(i: number, v: Vector4): void;
    onUpdate(view?: View3D): void;
    private computeTrail;
}
