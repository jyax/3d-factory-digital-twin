import { MeshRenderer } from "../../../../../components/renderer/MeshRenderer";
import { View3D } from "../../../../../core/View3D";
import { Object3D } from "../../../../../core/entities/Object3D";
import { GeometryBase } from "../../../../../core/geometry/GeometryBase";
import { Color } from "../../../../../math/Color";
import { Vector2 } from "../../../../../math/Vector2";
import { Vector4 } from "../../../../../math/Vector4";
import { BitmapTexture2DArray } from "../../../../../textures/BitmapTexture2DArray";
import { Struct } from "../../../../../util/struct/Struct";
import { StorageGPUBuffer } from "../../../../graphics/webGpu/core/buffer/StorageGPUBuffer";
export declare enum FaceMode {
    FaceToCamera = 0,
    FaceToPath = 1,
    FaceToUp = 2
}
export declare class RibbonStruct extends Struct {
    index: number;
    segment: number;
    visible: number;
    width: number;
    uv: Vector4;
    uvSpeed: Vector2;
    smooth: number;
    faceMode: number;
    up: Vector4;
    ids: Float32Array;
    ribbonPoint: Object3D[];
}
export declare class Graphic3DRibbonRenderer extends MeshRenderer {
    static maxRibbonSegment: number;
    transformBuffer: StorageGPUBuffer;
    sourceGeometry: GeometryBase;
    texture: BitmapTexture2DArray;
    object3Ds: Object3D[];
    ribbons: RibbonStruct[];
    ribbonCount: number;
    private _onChange;
    private _computeShader;
    private _ribbonBuffer;
    ribbonSegment: number;
    init(): void;
    create(ribbonSegment: number, tex: BitmapTexture2DArray, num: number): void;
    startRibbon(texture: BitmapTexture2DArray, ribonSegment: number, count: number): void;
    setTextureID(i: number, id: number): void;
    setBaseColor(i: number, color: Color): void;
    setEmissiveColor(i: number, color: Color): void;
    setUVRect(i: number, v: Vector4): void;
    setLineUVRect(i: number, v: Vector4): void;
    onUpdate(view?: View3D): void;
    private computeTrail;
}
