/// <reference types="@webgpu/types" />
import { Vector3 } from '../../../math/Vector3';
import { VirtualTexture } from '../../../textures/VirtualTexture';
import { StorageGPUBuffer } from '../../graphics/webGpu/core/buffer/StorageGPUBuffer';
import { RendererPassState } from '../passRenderer/state/RendererPassState';
import { PostBase } from './PostBase';
import { RTFrame } from '../frame/RTFrame';
import { View3D } from '../../../core/View3D';
/**
 * Screen space reflection
 * ```
 *       //setting
 *       let cfg = {@link Engine3D.setting.render.postProcessing.ssr};
 *         let view = new View3D();
        view.scene = this.scene;
        view.camera = mainCamera;
        
 *
 *       Engine3D.startRender(renderJob);
 *```
 * @group Post Effects
 */
export declare class SSRPost extends PostBase {
    private SSR_RayTraceCompute;
    private SSR_IS_Compute;
    private SSR_Blend_Compute;
    /**
     * @internal
     */
    isRetTexture: VirtualTexture;
    /**
     * @internal
     */
    finalTexture: VirtualTexture;
    /**
     * @internal
     */
    rendererPassState: RendererPassState;
    /**
     * @internal
     */
    ssrUniformBuffer: StorageGPUBuffer;
    /**
     * @internal
     */
    rayTraceData: StorageGPUBuffer;
    /**
     * @internal
     */
    ssrColorData: StorageGPUBuffer;
    /**
     * @internal
     */
    isKernelFloat32Array: Float32Array;
    rtFrame: RTFrame;
    historyPosition: StorageGPUBuffer;
    constructor();
    /**
     * @internal
     */
    onAttach(view: View3D): void;
    /**
     * @internal
     */
    onDetach(view: View3D): void;
    private reflectionRatio;
    get fadeEdgeRatio(): number;
    set fadeEdgeRatio(value: number);
    get rayMarchRatio(): number;
    set rayMarchRatio(value: number);
    get roughnessThreshold(): number;
    set roughnessThreshold(value: number);
    get fadeDistanceMin(): number;
    set fadeDistanceMin(value: number);
    get fadeDistanceMax(): number;
    set fadeDistanceMax(value: number);
    get powDotRN(): number;
    set powDotRN(value: number);
    private debug;
    private createRayTraceShader;
    private createISShader;
    private createBlendShader;
    private createResource;
    /**
     * @internal
     */
    render(view: View3D, command: GPUCommandEncoder): void;
    onResize(): void;
}
/**
 * @internal
 * @group Post Effects
 */
export declare class SSR_IS_Kernel {
    static createSeeds(): Vector3[];
}
