/// <reference types="@webgpu/types" />
import { UniformGPUBuffer } from '../../graphics/webGpu/core/buffer/UniformGPUBuffer';
import { ComputeShader } from '../../graphics/webGpu/shader/ComputeShader';
import { RendererPassState } from '../passRenderer/state/RendererPassState';
import { PostBase } from './PostBase';
import { View3D } from '../../../core/View3D';
import { RTFrame } from '../frame/RTFrame';
import { VirtualTexture } from '../../../textures/VirtualTexture';
/**
 * Bloom Effects
 * ```
 * bloom setting
 * let cfg = {@link Engine3D.setting.render.postProcessing.bloom};
 *```
 * @group Post Effects
 */
export declare class BloomPost extends PostBase {
    /**
     * @internal
     */
    RT_BloomUp: VirtualTexture[];
    RT_BloomDown: VirtualTexture[];
    RT_threshold: VirtualTexture;
    /**
     * @internal
     */
    rendererPassState: RendererPassState;
    /**
     * @internal
     */
    thresholdCompute: ComputeShader;
    downSampleComputes: ComputeShader[];
    upSampleComputes: ComputeShader[];
    postCompute: ComputeShader;
    /**
     * @internal
     */
    bloomSetting: UniformGPUBuffer;
    /**
     * @internal
     */
    rtFrame: RTFrame;
    constructor();
    /**
     * @internal
     */
    onAttach(view: View3D): void;
    /**
     * @internal
     */ Render: any;
    onDetach(view: View3D): void;
    private createGUI;
    private removeGUI;
    get downSampleBlurSize(): number;
    set downSampleBlurSize(value: number);
    get downSampleBlurSigma(): number;
    set downSampleBlurSigma(value: number);
    get upSampleBlurSize(): number;
    set upSampleBlurSize(value: number);
    get upSampleBlurSigma(): number;
    set upSampleBlurSigma(value: number);
    get luminanceThreshole(): number;
    set luminanceThreshole(value: number);
    get bloomIntensity(): number;
    set bloomIntensity(value: number);
    private createThreshouldCompute;
    private createDownSampleComputes;
    private createUpSampleComputes;
    private createPostCompute;
    private createResource;
    /**
     * @internal
     */
    render(view: View3D, command: GPUCommandEncoder): void;
    onResize(): void;
}
