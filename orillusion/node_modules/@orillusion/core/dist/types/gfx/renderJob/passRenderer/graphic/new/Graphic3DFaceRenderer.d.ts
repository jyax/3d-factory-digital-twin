/// <reference types="@webgpu/types" />
import { MeshRenderer } from "../../../../../components/renderer/MeshRenderer";
import { View3D } from "../../../../../core/View3D";
import { Color } from "../../../../../math/Color";
import { Vector4 } from "../../../../../math/Vector4";
import { BitmapTexture2DArray } from "../../../../../textures/BitmapTexture2DArray";
import { Struct } from "../../../../../util/struct/Struct";
import { StorageGPUBuffer } from "../../../../graphics/webGpu/core/buffer/StorageGPUBuffer";
import { StructStorageGPUBuffer } from "../../../../graphics/webGpu/core/buffer/StructStorageGPUBuffer";
import { ShapeInfo } from "./ShapeInfo";
export declare enum LineJoin {
    bevel = 0,
    miter = 1,
    round = 2
}
export declare enum LineCap {
    butt = 0,
    square = 1,
    round = 2
}
export declare class DrawInfo extends Struct {
    skipFace: number;
    skipFace2: number;
    skipFace3: number;
    skipFace4: number;
}
export declare class GeometryInfo extends Struct {
    index: number;
    faceStart: number;
    faceEnd: number;
    faceCount: number;
}
export declare class Graphic3DFaceRenderer extends MeshRenderer {
    static maxFaceCount: number;
    static maxGeometryCount: number;
    static maxPathPointCount: number;
    static maxShapeCount: number;
    texture: BitmapTexture2DArray;
    transformBuffer: StorageGPUBuffer;
    private _onChange;
    private _computeGeoShader;
    geometryInfoBuffer: StructStorageGPUBuffer<GeometryInfo>;
    shapeBuffer: StructStorageGPUBuffer<ShapeInfo>;
    pathBuffer: StorageGPUBuffer;
    drawBuffer: StorageGPUBuffer;
    object3Ds: any[];
    shapes: ShapeInfo[];
    realDrawShape: number;
    needUpdate: boolean;
    init(): void;
    create(tex: BitmapTexture2DArray, num: number): void;
    startShape(texture: BitmapTexture2DArray): void;
    setShape(index: number, shape: ShapeInfo): void;
    updateShape(): void;
    setTextureID(i: number, id: number): void;
    setBaseColor(i: number, color: Color): void;
    setEmissiveColor(i: number, color: Color): void;
    setUVRect(i: number, v: Vector4): void;
    onUpdate(view?: View3D): void;
    onCompute(view: View3D, command: GPUCommandEncoder): void;
    private computeTrail;
}
