/// <reference types="@webgpu/types" />
import { BitmapTexture2DArray, Color, ComputeShader, Ctor, MeshRenderer, Object3D, StorageGPUBuffer, StructStorageGPUBuffer, UnLitTexArrayMaterial, Vector4, View3D } from "@orillusion/core";
import { DynamicDrawStruct } from "./DynamicDrawStruct";
export declare class DynamicFaceRenderer extends MeshRenderer {
    texture: BitmapTexture2DArray;
    transformBuffer: StorageGPUBuffer;
    nodeStructBuffer: StructStorageGPUBuffer<DynamicDrawStruct>;
    drawAtomicBuffer: StorageGPUBuffer;
    protected object3Ds: Object3D[];
    nodes: DynamicDrawStruct[];
    protected _initCompute: boolean;
    protected _needCompute: boolean;
    protected _onBufferChange: boolean;
    protected _onStartKernel: ComputeShader[];
    protected _onChangeKernelGroup: ComputeShader[];
    protected _onFrameKernelGroup: ComputeShader[];
    protected nodeMat: UnLitTexArrayMaterial;
    protected maxFaceCount: number;
    protected maxNodeCount: number;
    private _nodeStruct;
    init(param?: any): void;
    protected initGeometryBuffer(): void;
    protected initMaterial(): void;
    protected initBaseBuffer(): void;
    protected createComputeKernel(): void;
    set<T extends DynamicDrawStruct>(nodeStruct: Ctor<T>, tex: BitmapTexture2DArray, standAloneMatrix?: boolean): void;
    setNodeStruct(index: number, shape: DynamicDrawStruct): void;
    updateShape(): void;
    setTextureID(i: number, id: number): void;
    setLineTextureID(i: number, id: number): void;
    setBaseColor(i: number, color: Color): void;
    setLineColor(index: number, color: Color): void;
    setEmissiveColor(i: number, color: Color): void;
    setFillRotation(i: number, radians: number): void;
    setUVRect(i: number, v: Vector4): void;
    setUVRect2(i: number, v: Vector4): void;
    /**
     *
     * @param {number} i index
     * @param {Vector4} v {x:fill speed u, y: fill speed v, z:line speed u, w: line speed v}
     * @memberof DynamicFaceRenderer
     */
    setUVSpeed(i: number, v: Vector4): void;
    onUpdate(view?: View3D): void;
    onCompute(view: View3D, command: GPUCommandEncoder): void;
    protected onStartCompute(view: View3D, command: GPUCommandEncoder): void;
    protected onChangeCompute(view: View3D, command: GPUCommandEncoder): void;
    protected onFrameCompute(view: View3D, command: GPUCommandEncoder): void;
}
