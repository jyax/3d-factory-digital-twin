import { GeometryBase } from "../../../../core/geometry/GeometryBase";
import { Color } from "../../../../math/Color";
import { Vector3 } from "../../../../math/Vector3";
import { Transform } from "../../../../components/Transform";
import { BoundingBox } from "../../../../core/bound/BoundingBox";
import { Camera3D } from "../../../../core/Camera3D";
import { Object3D } from "../../../../core/entities/Object3D";
import { Graphics3DShape } from "./Graphics3DShape";
import { Graphic3DFillRenderer } from "./Graphic3DFillRenderer";
import { Graphic3DLineRenderer } from "./Graphic3DLineBatchRenderer";
export declare class Graphic3D extends Object3D {
    protected mLineRender: Graphic3DLineRenderer;
    protected mFillRender: Graphic3DFillRenderer;
    constructor();
    /**
     * Draw the 3 - dimensional axes
     * @param uuid Graphic identification ID
     * @param origin original point
     * @param size Length of axis
     */
    drawAxis(uuid: string, origin?: Vector3, size?: number): void;
    /**
     * Draw a line
     * @param uuid Graphic identification ID
     * @param points Line path point
     * @param color Color
     */
    drawLines(uuid: string, points: Vector3[], colors?: Color | Color[]): void;
    /**
     * drawing curve
     * @param uuid Graphic identification ID
     * @param points Curve position point
     * @param samples Number of Samples
     * @param tension Strength of curve
     * @param color Color of curve
     */
    drawCurve(uuid: string, points: Vector3[], samples?: number, tension?: number, color?: Color): void;
    protected calculateBezierCurve(p0: Vector3, p1: Vector3, p2: Vector3, p3: Vector3, samples: number): Vector3[];
    /**
     * Draw a rectangle
     * @param uuid Graphic identification ID
     * @param origin original point
     * @param width Width of rectangle
     * @param height Height of rectangle
     * @param color The color of the rectangle
     */
    drawRect(uuid: string, origin: Vector3, width: number, height: number, color?: Color): void;
    /**
     * Draw a circle
     * @param uuid Graphic identification ID
     * @param center centre point
     * @param radius radius
     * @param segments Number of line segments
     * @param up Direction of plane
     * @param color The color of the circle
     */
    drawCircle(uuid: string, center: Vector3, radius: number, segments?: number, up?: Vector3, color?: Color): void;
    /**
     * Draw a Sector
     * @param uuid Graphic identification ID
     * @param center centre point
     * @param radius radius
     * @param startAngle Angle of onset
     * @param endAngle Angle of end
     * @param segments number of segments
     * @param up Direction of plane
     * @param color The color of the sector
     */
    drawSector(uuid: string, center: Vector3, radius: number, startAngle: number, endAngle: number, segments?: number, up?: Vector3, color?: Color): void;
    /**
     * Draw a ArcLine
     * @param uuid Graphic identification ID
     * @param center centre point
     * @param radius radius
     * @param startAngle  Angle of onset
     * @param endAngle Angle of end
     * @param segments  number of segments
     * @param up Direction of plane
     * @param color The color of the sector
     */
    drawArcLine(uuid: string, center: Vector3, radius: number, startAngle: number, endAngle: number, segments?: number, up?: Vector3, color?: Color): void;
    /**
     * Creates a custom line segment graph and returns a Shape with the same uuid from the pool if it already exists.
     * @param uuid Graphic identification ID
     * @param parentTransform Parent node Transform
     * @returns Graphics3DShape
     */
    createCustomShape(uuid: string, parentTransform?: Transform): Graphics3DShape;
    /**
     * Draw the box
     * @param uuid Graphic identification ID
     * @param minPoint Point of minimum
     * @param maxPoint Point of maximum
     * @param color The color of the box
     */
    drawBox(uuid: string, minPoint: Vector3, maxPoint: Vector3, color?: Color): void;
    /**
     * Draw the fill rectangle
     * @param uuid Graphic identification ID
     * @param minPoint Point of minimum
     * @param maxPoint Point of maximum
     * @param color The color of the fill rectangle
     */
    drawFillRect(uuid: string, origin: Vector3, width: number, height: number, color?: Color): void;
    /**
     * Draw the fill circle
     * @param uuid Graphic identification ID
     * @param center centre point
     * @param radius radius
     * @param segments number of segments
     * @param up Direction of plane
     * @param color The color of the fill circle
     */
    drawFillCircle(uuid: string, center: Vector3, radius: number, segments?: number, up?: Vector3, color?: Color): void;
    /**
     * Draw wire frame for geometry
     * @param uuid Graphic identification ID
     * @param geometry Geometric object
     * @param transform The Transform that needs to be bound
     * @param color The color of the wire frame
     */
    drawMeshWireframe(uuid: string, geometry: GeometryBase, transform: Transform, color?: Color, forceUpdate?: boolean): void;
    /**
     * Draw the fill sector
     * @param uuid Graphic identification ID
     * @param center centre point
     * @param radius radius
     * @param startAngle Angle of onset
     * @param endAngle Angle of end
     * @param segments number of segments
     * @param up Direction of plane
     * @param color The color of the fill sector
     */
    drawFillSector(uuid: string, center: Vector3, radius: number, startAngle: number, endAngle: number, segments?: number, up?: Vector3, color?: Color): void;
    /**
     * Draw bounding box
     * @param uuid Graphic identification ID
     * @param boundingBox Bounding box object, please use world boundingbox
     * @param color The color of the bounding box
     */
    drawBoundingBox(uuid: string, boundingBox: BoundingBox, color?: Color): void;
    /**
     * Draw the camera cone
     * @param camera The camera to display the cone
     * @param color The color of the camera cone
     */
    drawCameraFrustum(camera: Camera3D, color?: Color): void;
    /**
     * Draws the bounding box of the object
     * @param obj The object to display the bounding box
     * @param color The color of the bounding box
     */
    drawObjectBoundingBox(obj: Object3D, color?: Color): void;
    /**
     * Erases the specified graph
     * @param uuid Graphic identification ID
     */
    Clear(uuid: string): void;
    /**
     * Erase all drawn graphics
     */
    ClearAll(): void;
    /**
     * Changes the specified graphics color
     * @param uuid Graphic identification ID
     * @param color New color value
     */
    ChangeColor(uuid: string, color: Color): void;
}
