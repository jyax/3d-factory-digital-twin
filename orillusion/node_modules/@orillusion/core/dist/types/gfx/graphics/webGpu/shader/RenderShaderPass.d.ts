/// <reference types="@webgpu/types" />
import { Color } from "../../../../math/Color";
import { BlendMode } from "../../../../materials/BlendMode";
import { GeometryBase } from "../../../../core/geometry/GeometryBase";
import { GPUBufferBase } from "../core/buffer/GPUBufferBase";
import { Texture } from "../core/texture/Texture";
import { ShaderPassBase } from "./ShaderPassBase";
import { ShaderStage } from "./ShaderStage";
import { ShaderReflectionVarInfo } from "./value/ShaderReflectionInfo";
import { ShaderState } from "./value/ShaderState";
import { RendererPassState } from "../../../renderJob/passRenderer/state/RendererPassState";
import { UniformValue } from "./value/UniformValue";
import { PassType } from "../../../renderJob/passRenderer/state/RendererType";
import { Vector4 } from "../../../../math/Vector4";
export declare class RenderShaderPass extends ShaderPassBase {
    passType: PassType;
    useRz: boolean;
    /**
     * Vertex shader name
     */
    vsName: string;
    /**
     * Fragment shader name
     */
    fsName: string;
    /**
     * State of the shader
     */
    shaderState: ShaderState;
    /**
     * The collection of textures used in shading
     */
    textures: {
        [name: string]: Texture;
    };
    /**
     * Render pipeline
     */
    pipeline: GPURenderPipeline;
    /**
     * BindGroup layout
     */
    bindGroupLayouts: GPUBindGroupLayout[];
    envMap: Texture;
    prefilterMap: Texture;
    protected _sourceVS: string;
    protected _sourceFS: string;
    protected _destVS: string;
    protected _destFS: string;
    protected _vsShaderModule: GPUShaderModule;
    protected _fsShaderModule: GPUShaderModule;
    protected _textureGroup: number;
    protected _textureChange: boolean;
    protected _groupsShaderReflectionVarInfos: ShaderReflectionVarInfo[][];
    outBufferMask: Vector4;
    constructor(vs: string, fs: string);
    /**
     * Blend mode
     */
    get renderOrder(): number;
    set renderOrder(value: number);
    /**
        * Cull mode
        */
    get doubleSide(): boolean;
    set doubleSide(value: boolean);
    /**
     * depthWriteEnabled mode
     */
    get depthWriteEnabled(): boolean;
    set depthWriteEnabled(value: boolean);
    /**
     * get render face cull mode
     */
    get cullMode(): GPUCullMode;
    /**
     * set render face cull mode
     */
    set cullMode(value: GPUCullMode);
    /**
     * get front face mode
     * @GPUFrontFace
     */
    get frontFace(): GPUFrontFace;
    /**
     * set front face mode
     * @GPUFrontFace value
     */
    set frontFace(value: GPUFrontFace);
    /**
     * Depth bias
     */
    get depthBias(): number;
    set depthBias(value: number);
    /**
     * Primitive topology
     */
    get topology(): GPUPrimitiveTopology;
    set topology(value: GPUPrimitiveTopology);
    /**
     * Blend mode
     */
    get blendMode(): BlendMode;
    set blendMode(value: BlendMode);
    /**
     * Depth compare function
     */
    get depthCompare(): GPUCompareFunction;
    set depthCompare(value: GPUCompareFunction);
    /**
     * Sets the entry point names for the RenderShader vertex phase and fragment phase
     * @param vsEntryPoint
     * @param fsEntryPoint
     */
    setShaderEntry(vsEntryPoint?: string, fsEntryPoint?: string): void;
    /**
     *
     * @param String name
     * @param UniformValue value
     */
    setUniform(name: string, value: UniformValue): void;
    /**
     * Set the texture used in the Render Shader code
     * @param name Name in the shader code
     * @param texture Texture object
     */
    setTexture(name: string, texture: Texture): void;
    get baseColor(): Color;
    set baseColor(value: Color);
    /**
     * Get the texture used in the Render Shader code
     * @param name Name in the shader code
     * @returns Texture object
     */
    getTexture(name: string): Texture;
    /**
     * Create a rendering pipeline
     * @param geometry
     * @param renderPassState
     */
    genRenderPipeline(geometry: GeometryBase, renderPassState: RendererPassState): void;
    /**
     * Recompile the shader and create the rendering pipeline
     * @param geometry
     * @param rendererPassState
     */
    reBuild(geometry: GeometryBase, rendererPassState: RendererPassState): void;
    /**
     * Apply render shader state value
     * @param geometry
     * @param materialPass
     * @param rendererPassState
     * @param noticeFun
     */
    apply(geometry: GeometryBase, rendererPassState: RendererPassState, noticeFun?: Function): void;
    /**
     * Precompile the shader code
     * @param geometry
     */
    preCompile(geometry: GeometryBase): void;
    /**
     * Apply defines syntax values
     * @param shader
     * @param renderPassState
     * @returns
     */
    applyPostDefine(shader: string, renderPassState: RendererPassState): string;
    /**
     * Set GPUBindGroup to the specified index slot
     * @param groupIndex
     * @param group
     */
    setBindGroup(groupIndex: number, group: GPUBindGroup): void;
    protected checkBuffer(bufferName: string, buffer: GPUBufferBase): void;
    protected preCompileShader(stage: ShaderStage, code: string, format?: string): void;
    protected compileShader(stage: ShaderStage, code: string, renderPassState: RendererPassState): void;
    protected getGroupLayout(index: number, infos: ShaderReflectionVarInfo[]): GPUBindGroupLayoutEntry[];
    private _cacheEntries;
    protected genGroups(groupIndex: number, infos: ShaderReflectionVarInfo[][], force?: boolean): void;
    private createPipeline;
    private createGroupLayouts;
    private preDefine;
    private genReflection;
    /**
     * Destroy and release render shader related resources
     */
    destroy(force?: boolean): void;
    /**
     * Destroy a RenderShader object
     * @param instanceID instance ID of the RenderShader
     */
    static destroyShader(instanceID: string): void;
    /**
     * Get the RenderShader object by specifying the RenderShader instance ID
     * @param instanceID instance ID of the RenderShader
     * @returns RenderShader object
     */
    static getShader(instanceID: string): RenderShaderPass;
    /**
     * Create a RenderShader with vertex shaders and fragment shaders
     * @param vs Vertex shader name
     * @param fs Fragment shader name
     * @returns Returns the instance ID of the RenderShader
     */
    static createShader(vs: string, fs: string): string;
}
