import { CanvasConfig } from './gfx/graphics/webGpu/CanvasConfig';
import { EngineSetting } from './setting/EngineSetting';
import { InputSystem } from './io/InputSystem';
import { View3D } from './core/View3D';
import { ForwardRenderJob } from './gfx/renderJob/jobs/ForwardRenderJob';
import { RendererJob } from './gfx/renderJob/jobs/RendererJob';
import { Res } from './assets/Res';
/**
 * Orillusion 3D Engine
 *
 * -- Engine3D.setting.*
 *
 * -- await Engine3D.init();
 * @group engine3D
 */
export declare class Engine3D {
    /**
     * resource manager in engine3d
     */
    static res: Res;
    /**
     * input system in engine3d
     */
    static inputSystem: InputSystem;
    /**
     * more view in engine3d
     */
    static views: View3D[];
    private static _frameRateValue;
    private static _frameRate;
    private static _frameTimeCount;
    private static _deltaTime;
    private static _time;
    private static _beforeRender;
    private static _renderLoop;
    private static _lateRender;
    private static _requestAnimationFrameID;
    static Engine3D: any;
    static divB: HTMLDivElement;
    /**
     * set engine render frameRate 24/30/60/114/120/144/240/360 fps or other
     */
    static get frameRate(): number;
    /**
     * get engine render frameRate
     */
    static set frameRate(value: number);
    /**
     * get render window size width and height
     */
    static get size(): number[];
    /**
     * get render window aspect
     */
    static get aspect(): number;
    /**
     * get render window size width
     */
    static get width(): number;
    /**
     * get render window size height
     */
    static get height(): number;
    /**
     * engine setting
     */
    static setting: EngineSetting;
    /**
     * @internal
     */
    static renderJobs: Map<View3D, RendererJob>;
    /**
     * create webgpu 3d engine
     * @param descriptor  {@link CanvasConfig}
     * @returns
     */
    static init(descriptor?: {
        canvasConfig?: CanvasConfig;
        beforeRender?: Function;
        renderLoop?: Function;
        lateRender?: Function;
        engineSetting?: EngineSetting;
    }): Promise<void>;
    /**
     * set render view and start renderer
     * @param view
     * @returns
     */
    static startRenderView(view: View3D): ForwardRenderJob;
    /**
     * set render views and start renderer
     * @param view
     * @returns
     */
    static startRenderViews(views: View3D[]): void;
    /**
     * get view render job instance
     * @param view
     * @returns
     */
    static getRenderJob(view: View3D): RendererJob;
    /**
     * Pause the engine render
     */
    static pause(): void;
    /**
     * Resume the engine render
     */
    static resume(): void;
    /**
     * start engine render
     * @internal
     */
    private static render;
    private static updateFrame;
}
