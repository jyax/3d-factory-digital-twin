import { Camera3D } from "../../core/Camera3D";
import { View3D } from "../../core/View3D";
import { Object3D } from "../../core/entities/Object3D";
import { Vector3 } from "../../math/Vector3";
import { ComponentBase } from "../ComponentBase";
/**
 * Hovering camera controller
 * @group CameraController
 */
export declare class HoverCameraController extends ComponentBase {
    /**
     * camera controlling
     */
    camera: Camera3D;
    /**
     * The closest distance that the mouse wheel can operate
     */
    minDistance: number;
    /**
     * The farthest distance that the mouse wheel can operate
     */
    maxDistance: number;
    /**
     * Smoothing coefficient of rolling angle
     */
    rollSmooth: number;
    /**
     * Smoothing coefficient of dragging
     */
    dragSmooth: number;
    /**
     * Smoothing coefficient of rolling
     */
    wheelSmooth: number;
    /**
     * Mouse scrolling step coefficient
     */
    wheelStep: number;
    /**
     * Right mouse movement coefficient
     */
    mouseRightFactor: number;
    /**
     * Left mouse movement coefficient
     */
    mouseLeftFactor: number;
    /**
     * Whether to enable smooth mode
     */
    smooth: boolean;
    /**
     * @internal
     */
    private _wheelStep;
    private _distance;
    /**
     * Distance between camera and target
     */
    distance: number;
    private _roll;
    /**
     * Roll angle around y-axis
     */
    roll: number;
    private _pitch;
    /**
     * Pitch angle around x-axis
     */
    pitch: number;
    private _currentPos;
    /**
     * @internal
     */
    private _targetPos;
    private _flowTarget;
    private _flowOffset;
    private _mouseLeftDown;
    private _mouseRightDown;
    private _bottomClamp;
    private _topClamp;
    private _tempDir;
    private _tempPos;
    /**
     * @constructor
     */
    constructor();
    /**
     * @internal
     */
    start(): void;
    flowTarget(target: Object3D, offset?: Vector3): void;
    getFlowTarget(): Object3D;
    /**
     * Initialize Camera
     * @param roll  Roll angle around y-axis
     * @param pitch Pitch angle around x-axis
     * @param distance max distance to target
     * @param target coordinates of the target
     */
    setCamera(roll: number, pitch: number, distance: number, target?: Vector3): void;
    focusByBounds(obj: Object3D): void;
    /**
     * Set target position
     */
    set target(target: Vector3);
    /**
     * Get target position
     * @return {Vector3}
     */
    get target(): Vector3;
    private onMouseWheel;
    private onMouseDown;
    private onMouseUp;
    /**
     * @internal
     */
    private onMouseMove;
    onBeforeUpdate(view?: View3D): void;
    /**
     * @internal
     */
    destroy(force?: boolean): void;
}
