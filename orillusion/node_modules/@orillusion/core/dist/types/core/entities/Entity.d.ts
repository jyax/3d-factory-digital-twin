import { IComponent } from '../../components/IComponent';
import { RenderNode } from '../../components/renderer/RenderNode';
import { Transform } from '../../components/Transform';
import { CEventDispatcher } from '../../event/CEventDispatcher';
import { IBound } from '../bound/IBound';
import { Object3D } from './Object3D';
/**
 * The entity class provides an abstract base class for all scene objects that are considered to have "existence" in the scene,
 *  which can be considered as actual objects with positions and sizes.
 * Entity class is an abstract class and cannot be instantiated. If you want to instantiate it, please use the Object 3D class.
 * @group Entity
 */
export declare class Entity extends CEventDispatcher {
    /**
     *
     * The name of the object. The default value is an empty string.
     */
    name: string;
    protected readonly _instanceID: string;
    private _numChildren;
    /**
     * The unique identifier of the object.
     */
    get instanceID(): string;
    /**
     *
     * The Transform attached to this object.
     */
    transform: Transform;
    /**
     *
     * Renderer components
     */
    renderNode: RenderNode;
    /**
     *
     * An array containing sub objects of an object
     */
    entityChildren: Entity[];
    /**
     *
     * List of components attached to an object
     */
    components: Map<any, IComponent>;
    protected waitDisposeComponents: IComponent[];
    /**
     *
     * The bounding box of an object
     */
    protected _bound: IBound;
    protected _boundWorld: IBound;
    protected _isBoundChange: boolean;
    private _dispose;
    /**
     *
     * Starting from the object itself, search for the object and its children, and return the first child object with a matching name.
     * For most objects, the name is an empty string by default. You must manually set it to use this method.
     * @param name input name
     * @returns result Entity
     */
    getObjectByName(name: string): Entity;
    /**
     *
     * @constructor
     */
    constructor();
    /**
     *
     * Returns the number of child objects of an object
     */
    get numChildren(): number;
    /**
     *
     * Add an object as a child of this object. You can add any number of objects.
     * Any current parent object on the object passed here will be deleted, as an object can only have at most one parent object.
     * @param child target child entity
     * @returns
     */
    addChild(child: Entity): Entity;
    /**
     *
     * Remove the child objects of the object. You can remove any number of objects.
     * @param child Removed objects
     */
    removeChild(child: Entity): void;
    /**
     *
     * Remove all children of the current object
     */
    removeAllChild(): void;
    /**
     *
     * Remove the current node from the parent
     * @returns this
     */
    removeSelf(): this;
    /**
     *
     * Search for child nodes of objects and remove child objects with matching indexes.
     * @param index assign index
     * @returns
     */
    removeChildByIndex(index: number): void;
    /**
     *
     * Does the current object contain a certain object
     * @param child certain object
     * @returns boolean
     */
    hasChild(child: Entity): boolean;
    /**
     *
     * Remove the current node from the parent
     * @returns this
     */
    removeFromParent(): this;
    /**
     *
     * Search for object children and return the first child object with a matching index.
     * @param index matching index
     * @returns child entity
     */
    getChildByIndex(index: number): Entity;
    /**
     *
     * Search for object children and return a child object with a matching name.
     * @param name matching name
     * @param loopChild Whether to traverse the children of the child object. The default value is true
     * @returns result
     */
    getChildByName(name: string, loopChild?: boolean): any;
    /**
     * @internal
     */
    update(): void;
    /**
     *
     * @private
     * @returns
     */
    instantiate(): Object3D;
    protected onTransformLocalChange(e: any): void;
    get bound(): IBound;
    set bound(value: IBound);
    private updateBound;
    /**
     *
     * @private
     * @returns
     */
    waitUpdate(): void;
    /**
     * release current object
     */
    destroy(force?: boolean): void;
}
