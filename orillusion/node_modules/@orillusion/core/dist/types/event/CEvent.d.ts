import { View3D } from '../core/View3D';
import { Object3D } from '../core/entities/Object3D';
import { TouchData } from '../io/TouchData';
import { CEventListener } from './CEventListener';
/**
 * Basic class of Event
 * @group Events
 */
export declare class CEvent {
    /**
     * Event target, it's usually event dispatcher
     */
    target: Object3D;
    /**
     * Current event target, it's current bubble object
     */
    currentTarget: CEventListener;
    /**
     * event type, it's registered string of key
     */
    type: string;
    /**
     * extra data.Used for the transmission process of events, carrying data
     */
    data: any;
    /**
     *
     * The param data when event is registered
     */
    param: any;
    /**
     *
     * the time when event is
     */
    time: number;
    /**
     *
     *the delay time when event is dispatched.
     */
    delay: number;
    /**
     *
     * mouse code, see @MouseCode {@link MouseCode}
     */
    mouseCode: number;
    /**
     * Is Ctrl key pressed when the event occurs
     */
    ctrlKey: boolean;
    /**
     * Is Alt key pressed when the event occurs
     */
    altKey: boolean;
    /**
     * Is Shift key pressed when the event occurs
     */
    shiftKey: boolean;
    /**
     * Collection of finger touch points, which registered
     */
    targetTouches: Array<TouchData>;
    /**
     * Collection of finger touch points changed
     */
    changedTouches: Array<TouchData>;
    /**
     * Collection of finger touch points
     */
    touches: Array<TouchData>;
    private _stopImmediatePropagation;
    /**
     * binded view3D object in event.
     */
    view: View3D;
    /**
     *
     * Create a new event, with type and data
     * @param eventType {any} eventType
     * @param data {any} param
     */
    constructor(eventType?: string, data?: any);
    /**
     *
     * Prevent bubbling of all event listeners in subsequent nodes of the current node in the event flow.
     */
    stopImmediatePropagation(): void;
    /**
     * @internal
     * set stopImmediatePropagation as false
     */
    reset(): void;
    /**
     * Returns stopImmediatePropagation value
     */
    get isStopImmediatePropagation(): boolean;
}
